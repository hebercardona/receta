{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","paciente","edad","peso","notas","handleChange","target","value","name","setState","createAndDownloadPdf","axios","post","then","get","responseType","res","pdfBlob","Blob","data","type","saveAs","className","src","onSubmit","this","handleSubmit","id","onChange","onClick","document","getElementById","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSA0GeA,G,wNAlGbC,MAAQ,CACNC,SAAU,GACVC,KAAM,EACNC,KAAM,EACNC,MAAO,G,EAGTC,aAAe,oBAAGC,OAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,KAApB,OAAgC,EAAKC,SAAL,eAAiBD,EAAOD,K,EAEvEG,qBAAuB,SAACF,GACtBG,IAAMC,KAAK,cAAe,EAAKZ,OAC5Ba,MAAK,kBAAMF,IAAMG,IAAI,YAAa,CAAEC,aAAc,YAClDF,MAAK,SAACG,GACL,IAAMC,EAAU,IAAIC,KAAK,CAACF,EAAIG,MAAO,CAAEC,KAAM,oBAE7CC,iBAAOJ,EAAD,UAAaT,EAAb,a,uDAIF,IAAD,OACP,OACE,yBAAKc,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAMC,IAAI,2GAG7B,yBAAKD,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UAAf,8BACA,6BAAK,yBAAKA,UAAU,uBAAf,iCACL,6BAAK,yBAAKA,UAAU,sBAAf,8BACL,6BAAK,yBAAKA,UAAU,uBAAf,4HAMX,0BAAME,SAAUC,KAAKC,cACrB,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,YACb,6CAIF,yBAAKA,UAAU,aACb,2BAAOF,KAAK,OAAOO,GAAG,WAAWnB,KAAK,WAAWoB,SAAUH,KAAKpB,iBAGlE,yBAAKiB,UAAU,OACf,yBAAKA,UAAU,YACb,yCAIF,yBAAKA,UAAU,aACb,2BAAOF,KAAK,SAASO,GAAG,OAAOnB,KAAK,OAAOD,MAAOkB,KAAKzB,MAAMO,MAAOqB,SAAUH,KAAKpB,iBAGrF,yBAAKiB,UAAU,OACf,yBAAKA,UAAU,YACb,yCAIF,yBAAKA,UAAU,aACb,2BAAOF,KAAK,SAASZ,KAAK,OAAOD,MAAOkB,KAAKzB,MAAMO,MAAOqB,SAAUH,KAAKpB,kBAK7E,yBAAKiB,UAAU,aACb,yBAAKA,UAAU,YACb,0CAIF,yBAAKA,UAAU,aACb,8BAAUA,UAAU,MAAMF,KAAK,OAAOZ,KAAK,QAAQD,MAAOkB,KAAKzB,MAAMO,MAAOqB,SAAUH,KAAKpB,iBAO/F,yBAAKiB,UAAU,cACb,yBAAKA,UAAU,6BACb,4BAAQA,UAAU,qBAAqBO,QAAS,kBAAO,EAAKnB,qBAAqBoB,SAASC,eAAe,YAAYxB,SAArH,0B,GA1FIyB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASC,eAAe,SDyHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90841fb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    paciente: '',\n    edad: 0,\n    peso: 0,\n    notas: 0,\n  }\n\n  handleChange = ({ target: { value, name }}) => this.setState({ [name]: value })\n\n  createAndDownloadPdf = (name) => {\n    axios.post('/create-pdf', this.state)\n      .then(() => axios.get('fetch-pdf', { responseType: 'blob' }))\n      .then((res) => {\n        const pdfBlob = new Blob([res.data], { type: 'application/pdf' });\n\n        saveAs(pdfBlob, `${name}.pdf`);\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App App-margin\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-2\">\n              <div className=\"img\">\n                <img className=\"img\" src=\"https://user-images.githubusercontent.com/37750446/94746704-eafb6180-0342-11eb-8097-89d722e4b9ab.jpg\"></img>\n              </div>\n            </div>\n            <div className=\"col-10 header\">\n              <div className=\"row\">\n                <div className=\"col-12\">Dra Yuridia Salazar Galvez</div>\n                <br/><div className=\"especialidad col-12\">ALERGIA E INMUNOLOGIA CLINICA</div>\n                <br/><div className=\"universidad col-12\">Universidad de Guadalajara</div>\n                <br/><div className=\"credenciales col-12\">Cédula Medicina General 7948253 / Cédula Pediatría 11028047 / Cédula en Alergia e Inmunología 11988279</div>\n              </div>\n            </div>\n          </div>\n\n        \n          <form onSubmit={this.handleSubmit}>\n          <div className=\"row\">\n            <div className=\"col-lg-2\">\n              <label>\n                Paciente:\n              </label>\n            </div>\n            <div className=\"col-lg-10\">\n              <input type=\"text\" id=\"paciente\" name=\"paciente\" onChange={this.handleChange} />\n            </div>\n            </div>\n            <div className=\"row\">\n            <div className=\"col-lg-2\">\n              <label>\n                Edad:\n              </label>\n            </div>\n            <div className=\"col-lg-10\">\n              <input type=\"number\" id=\"edad\" name=\"edad\" value={this.state.value} onChange={this.handleChange} />\n            </div>\n            </div>\n            <div className=\"row\">\n            <div className=\"col-lg-2\">\n              <label>\n                Peso:\n              </label>\n            </div>\n            <div className=\"col-lg-10\">\n              <input type=\"number\" name=\"peso\" value={this.state.value} onChange={this.handleChange} />\n            </div>\n            </div>\n          </form>\n\n          <div className=\"row notas\">\n            <div className=\"col-lg-2\">\n              <label>\n                Notas:\n              </label>\n            </div>\n            <div className=\"col-lg-10\">\n              <textarea className=\"txt\" type=\"text\" name=\"notas\" value={this.state.value} onChange={this.handleChange} />\n            </div>\n            </div>\n        \n\n          \n          \n          <div className=\"row inputs\">\n            <div className=\"col-lg-12 col-sm-12 boton\">\n              <button className=\"boton btn btn-dark\" onClick={() => (this.createAndDownloadPdf(document.getElementById('paciente').value))}>Generar Receta</button>\n            </div>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}